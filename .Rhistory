geom_point(data=df_centroids, aes(x=x, y=y), shape=13, color='grey38')+
xlab("CCA1") + ylab("CCA2")+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
pdf("/Users/ellewibisono/Desktop/Dissertation/GearSelectivity/Rfigures/CCAplot3bw.pdf")
print(ccaggplot_bw)
dev.off()
ccaggplot_bw <- ggplot()+geom_segment(data=df_arrows, aes(x = 0, y = 0, xend = x, yend = y),
arrow = arrow(length = unit(0.2, "cm")), color='grey65') +
geom_point(data=df_sites, aes(x=CCA1, y=CCA2),color='grey80', alpha=0.3, size=2)+
geom_point(data = df_species_rm, aes(x=x, y=y), alpha=0.7, size=1.5)+
#geom_text_repel(data=subset(df_species_rm, x<0),aes((subset(df_species_rm, x<0))$x,(subset(df_species_rm, x<0))$y,label=rownames(subset(df_species_rm, x<0))), fontface='italic', size=2.7)+
#geom_text_repel(data=subset(df_species_rm, x>0),aes((subset(df_species_rm, x>0))$x,(subset(df_species_rm, x>0))$y,label=rownames(subset(df_species_rm, x>0))), fontface='italic', size=2.7)+
#geom_text_repel(data=df_centroids,aes(x,y,label=rownames(df_centroids)),fontface='bold',direction='y', color='grey44', size=4, nudge_y= 0.2)+
geom_text_repel(data=df_arrows1,aes(x,y,label=rownames(df_arrows1)), color='grey57', size=3, fontface='bold', direction='both',
segment.color = NA, nudge_x = -0.2)+
geom_text_repel(data=df_arrows2,aes(x,y,label=rownames(df_arrows2)), color='grey57', size=3, fontface='bold', direction='both',
segment.color = NA, nudge_y = 0.2)+
geom_point(data=df_centroids, aes(x=x, y=y), shape=13, color='grey38')+
xlab("CCA1") + ylab("CCA2")+
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
pdf("/Users/ellewibisono/Desktop/Dissertation/GearSelectivity/Rfigures/CCAplot3bw.pdf")
print(ccaggplot_bw)
dev.off()
m <- dbDriver("PostgreSQL")
con <- dbConnect(m,host='localhost', port='5432',user="postgres", password="fishy", dbname="ifish_05062020")
rs <- dbSendQuery(con, "SELECT b.boat_name, b.program_type, b.registration_port, b.fishing_gear, b.gt_estimate, b.oid,
t.boat_id, t.tracker_id,t.tracker_status, t.tracker_start_date, t.tracker_end_date, s.*
FROM ifish_boat b
INNER JOIN ifish_boat_tracker t on b.oid= t.boat_id
INNER JOIN ifish_findmespot s on t.tracker_id=s.tracker_id
WHERE t.tracker_status=1 and s.date_time >= t.tracker_start_date
UNION
SELECT b.boat_name, b.program_type, b.registration_port, b.fishing_gear, b.gt_estimate, b.oid,
t.boat_id, t.tracker_id, t.tracker_status, t.tracker_start_date, t.tracker_end_date, s.*
FROM ifish_boat b
INNER JOIN ifish_boat_tracker t on b.oid= t.boat_id
INNER JOIN ifish_findmespot s on t.tracker_id=s.tracker_id
WHERE t.tracker_status=0 and s.date_time >= t.tracker_start_date and
s.date_time <= t.tracker_end_date;")
df_spat <- fetch(rs, n=-1)
dbHasCompleted(rs)
#load some depth information
library(raster)
library(akima)
depthraster <- raster("/Users/ElleWibisono/Desktop/Dissertation/R codes/gebco.tif")
#filter for snapper program data only
df <- df_spat %>% setNames(make.unique(names(.))) %>%
dplyr::filter(program_type=='Snapper')
library(geosphere)
#simple helper, computes distance as crows flies
simple_distance<-function(lon1,lat1,lon2,lat2){
elements<-length(lon1)
distances<-geosphere::distHaversine(cbind(lon1, lat1), cbind(lon2, lat2))
return(distances)}
fishing_grounds<- function(df, depthraster){
depth<- as.data.frame(rasterToPoints(depthraster)) %>%
dplyr::rename(depth=gebco) %>%
## notice that depth is -99999 for land, we need to change that
mutate(depth=ifelse(depth==-99999,10000,depth))
# turn it spatial
coordinates(depth)<-c("x","y")
# at start they are just long-lat observations
proj4string(depth) <-CRS("+proj=longlat +datum=WGS84")
# now we need to interpolate (this finds depth at each ping)
#this takes quite a long time!
interpolated_depths<-akima::interpp(x=coordinates(depth)[,1],
y=coordinates(depth)[,2],
z = depth$depth,
xo = df$longitude,
yo = df$latitude,
duplicate="strip"
)
#add to data frame
df$depth <- interpolated_depths$z
#change date time format
df$datetime<-ymd(df$date_time)
#remove uneccessary columns
df <- df %>% dplyr::select(-oid, -oid.1, -tracker_name, -unix_time, -battery_state, -date_time, -tracker_id.1, -tracker_status)
### replace -99999 for lat and long with missing values
df <-
df %>%
dplyr::rename(boatname = boat_name) %>%
dplyr::filter(longitude !=-99999) %>%
dplyr::filter(latitude !=-99999) %>%
dplyr::arrange(boatname,datetime)
df <-
df%>%
ungroup() %>%
#group by boat name, this makes sure that we compute difftime only when it's between the same boat
dplyr::group_by(boatname) %>%
dplyr::mutate(time_diff=difftime(`datetime`,
lag(`datetime`,order_by=`datetime`),
unit="hours"))
# ### this is the burst as defined by the original script, we use it only briefly
df <-
df %>%
ungroup() %>%
#begin of burst is flagged here as either a completely new boat or a week has passed
mutate(BeginOfBurst = ifelse(is.na(time_diff) | time_diff > 7*24*60*60 ,1,0))  %>%
mutate(burst = cumsum(BeginOfBurst)) %>%
dplyr::select(-BeginOfBurst)
df<-
df %>% ungroup() %>%
group_by(burst) %>%
distinct(`datetime`,.keep_all = TRUE) %>%
ungroup()
## let's try to build distances by hand without using new libraries
df<-
df %>%
group_by(burst) %>%
# compute distance
mutate(distance = simple_distance(longitude,latitude,lag(longitude),lag(latitude))) %>%
# distance in terms of km!
mutate(distance= distance/1000)
#now let's compute speed in km/h
df<-
df %>%
mutate(speed = distance/as.numeric(time_diff))
#tag bad observations:
df<-
df %>%
group_by(burst) %>%
mutate(quality = ifelse(
(speed < 30 | is.na(speed)) & (lag(speed)<30 | is.na(lag(speed))),1,0))
## simply drop all observations without lat and long
df<-
df %>%
filter(!is.na(longitude)) %>%
filter(!is.na(latitude))
#Find other bathymetry properties based on the depthraster
slope <- terrain(depthraster, opt='slope', unit='degrees')
aspect <- terrain(depthraster, opt='aspect', unit='degrees')
BRI <- terrain(depthraster, opt='TRI', unit='degrees')
BPI <- terrain(depthraster, opt='TPI', unit='degrees')
roughness <- terrain(depthraster, opt='roughness', unit='degrees')
#Change all this to dataframe
slope <- as.data.frame(rasterToPoints(slope))
aspect <- as.data.frame(rasterToPoints(aspect))
BRI <- as.data.frame(rasterToPoints(BRI))
BPI <- as.data.frame(rasterToPoints(BPI))
roughness <- as.data.frame(rasterToPoints(roughness))
#Interpolate slope
interpolated_slopes <- akima::interpp(x=coordinates(slope)[,1],
y=coordinates(slope)[,2],
z = slope$slope,
xo = df$longitude,
yo = df$latitude,
duplicate="strip"
)
#Interpolated aspect
interpolated_aspect <- akima::interpp(x=coordinates(aspect)[,1],
y=coordinates(aspect)[,2],
z = aspect$aspect,
xo = df$longitude,
yo = df$latitude,
duplicate="strip"
)
#Interpolated BRI
interpolated_BRI <- akima::interpp(x=coordinates(BRI)[,1],
y=coordinates(BRI)[,2],
z = BRI$tri,
xo = df$longitude,
yo = df$latitude,
duplicate="strip"
)
#Interpolated BPI
interpolated_BPI <- akima::interpp(x=coordinates(BPI)[,1],
y=coordinates(BPI)[,2],
z = BPI$tpi,
xo = df$longitude,
yo = df$latitude,
duplicate="strip"
)
#Interpolate roughness
interpolated_roughness <- akima::interpp(x=coordinates(roughness)[,1],
y=coordinates(roughness)[,2],
z = roughness$roughness,
xo = df$longitude,
yo = df$latitude,
duplicate="strip"
)
#add that to the original data frame
df$Aspect= interpolated_aspect$z
df$Slope =interpolated_slopes$z
df$BRI= interpolated_BRI$z
df$BPI=interpolated_BPI$z
df$Roughness=interpolated_roughness$z
return(df)}
fishing_grounds(df, depthraster)
View(df)
setwd("parent_directory")
create("ifish")
library(devtools)
library(roxygen2)
setwd("parent_directory")
create("ifish")
setwd("./ifish")
document()
setwd("./ifish")
setwd("./ifish")
document()
setwd("./ifish")
document()
setwd(..)
setwd('..')
install('ifish')
library(ifish)
?ifish
fishing_grounds(df, depthraster)
ifish::fishing_grounds(df, depthraster)
?fishing_grounds
rm(fishing_grounds
ifish::fishing_grounds(df, depthraster)
library(ifish)
setwd('./ifish')
document()
species_freq_gear(df2)
rm(fishing_grounds, envir='GlobalEnvir')
rm(fishing_grounds, envir='GlobalEnv')
?envir
rm(fishing_grounds, envir='.GlobalEnv')
rm(fishing_grounds)
fishing_grounds(df2, depthraster)
colnames(df2)
con <- dbConnect(m,host='localhost', port='5432',user="postgres", password="fishy", dbname="ifish_05142019")
#con <- dbConnect(m,host='localhost', port='5432',user="postgres", password="fishy", dbname="ifish_01242020")
rs <- dbSendQuery(con, "SELECT b.boat_name, b.program_type, b.registration_port, b.fishing_gear, b.gt_estimate, b.oid,
t.boat_id, t.tracker_id,t.tracker_status, t.tracker_start_date, t.tracker_end_date, s.*
FROM ifish_boat b
INNER JOIN ifish_boat_tracker t on b.oid= t.boat_id
INNER JOIN ifish_findmespot s on t.tracker_id=s.tracker_id
WHERE t.tracker_status=1 and s.date_time >= t.tracker_start_date
UNION
SELECT b.boat_name, b.program_type, b.registration_port, b.fishing_gear, b.gt_estimate, b.oid,
t.boat_id, t.tracker_id, t.tracker_status, t.tracker_start_date, t.tracker_end_date, s.*
FROM ifish_boat b
INNER JOIN ifish_boat_tracker t on b.oid= t.boat_id
INNER JOIN ifish_findmespot s on t.tracker_id=s.tracker_id
WHERE t.tracker_status=0 and s.date_time >= t.tracker_start_date and
s.date_time <= t.tracker_end_date;")
df2 <- fetch(rs, n=-1)
dbHasCompleted(rs)
fishing_grounds(df2, depthraster)
fishing_grounds(df2, depthraster)
fishing_grounds(df2, depthraster)
library(ifish)
fishing_grounds(df2, depthraster)
library(ifish)
fishing_grounds(df2,depthraster)
rm(ifish)
install('ifish')
devtools::install('ifish')
setwd('./ifish')
library(ifish)
?ifish
View(df2topenvironmental)
View(environmentalmatched)
?split
blo <- df2 %>%
split(.$fishing_gear) %>%
map(group_by(fishname)) %>%
map(summarise(count=n())) %>%
map(arrange(desc(count))) %>%
map(top_n(5))
df2 %>%
split(.$fishing_gear)
View(df2)
m <- dbDriver("PostgreSQL")
#con <- dbConnect(m,host='localhost', port='5432',user="postgres", password="fishy", dbname="ifish_05142019")
con <- dbConnect(m,host='localhost', port='5432',user="postgres", password="fishy", dbname="ifish_01242020")
rs <- dbSendQuery(con, "SELECT f.oid, f.var_a, f.var_b, f.fish_genus, f.fish_species, f.lmat, f.lopt, f.linf, f.lmax, s.cm,
d.boat_id, d.landing_date, d.wpp1, d.wpp2, d.wpp3, d.first_codrs_picture_date, s.landing_id,
b.oid, b.registration_port,
b.gt_estimate, b.gt_declared, b.program_type, b.fishing_gear, b. boat_name
FROM ifish_fish f
INNER JOIN ifish_sizing s on f.oid= s.fish_id
INNER JOIN ifish_deepslope d on s.landing_id = d.oid
INNER JOIN ifish_boat b on d.boat_id= b.oid
WHERE s.fish_id > 0 and s.data_quality = 1
ORDER BY s.landing_id")
df2 <- fetch(rs, n=-1)
dbHasCompleted(rs)
blo <- df2 %>%
split(.$fishing_gear) %>%
map(group_by(fishname)) %>%
map(summarise(count=n())) %>%
map(arrange(desc(count))) %>%
map(top_n(5))
#filter for snapper only
df2 <- df2 %>%setNames(make.unique(names(.))) %>%
dplyr::filter(program_type=='Snapper') %>%
unite(fishname, fish_genus, fish_species, sep=" ", remove= FALSE) %>%
dplyr::mutate(weight=(var_a *(cm^var_b)/1000))
#Remove data with no fishname
df2 <- df2[!(is.na(df2$fishname) | df2$fishname==" "), ] #remove NAs and blank fishnames
blo <- df2 %>%
split(.$fishing_gear) %>%
map(group_by(fishname)) %>%
map(summarise(count=n())) %>%
map(arrange(desc(count))) %>%
map(top_n(5))
df2 %>%
split(.$fishing_gear)
blo <- df2 %>%
split(.$fishing_gear) %>%
map(dplyr::group_by(fishname)) %>%
map(dplyr::summarise(count=n())) %>%
map(dplyr::arrange(desc(count))) %>%
map(top_n(5))
blo <- df2 %>%
split(.$fishing_gear) %>%
map(dplyr::group_by(.$fishname)) %>%
map(dplyr::summarise(count=n())) %>%
map(dplyr::arrange(desc(count))) %>%
map(top_n(5))
blo <- df2 %>%
split(.$fishing_gear) %>%
map(dplyr::group_by(fishname), data=.) %>%
map(dplyr::summarise(count=n())) %>%
map(dplyr::arrange(desc(count))) %>%
map(top_n(5))
blo <- df2 %>%
split(.$fishing_gear) %>%
map(~dplyr::group_by(fishname), data=.) %>%
map(dplyr::summarise(count=n())) %>%
map(dplyr::arrange(desc(count))) %>%
map(top_n(5))
?group_by
blo <- df2 %>%
split(.$fishing_gear) %>%
map(dplyr::group_by(fishname, data=.)) %>%
map(dplyr::summarise(count=n()), data=.) %>%
map(dplyr::arrange(desc(count)), data=.) %>%
map(top_n(5), data=.)
blo <- df2 %>%
split(.$fishing_gear) %>%
map(dplyr::group_by(fishname, .data=.)) %>%
map(dplyr::summarise(count=n()), data=.) %>%
map(dplyr::arrange(desc(count)), data=.) %>%
map(top_n(5), data=.)
blo <- df2 %>%
group_split(fishing_gear) %>%
map(dplyr::group_by(fishname, .data=.)) %>%
map(dplyr::summarise(count=n()), data=.) %>%
map(dplyr::arrange(desc(count)), data=.) %>%
map(top_n(5), data=.)
blo <- df2 %>%
group_split(fishing_gear) %>%
map(dplyr::group_by(fishname)) %>%
map(dplyr::summarise(count=n()), data=.) %>%
map(dplyr::arrange(desc(count)), data=.) %>%
map(top_n(5), data=.)
###==========================================
#Community data with the top 5 species in each gear type
#Not use top 20 species overall because we are NOT assuming that
#they all belong to one fishery/ metier
groupingfunction <- function(x){
x %>%
group_split(fishing_gear)%>%
dplyr::group_by(fishname) %>%
dplyr::summarise(count=n()) %>%
dplyr::arrange(desc(count)) %>%
dplyr::top_n(5)
}
blo <- map(df2, groupingfunction)
?map
###==========================================
#Community data with the top 5 species in each gear type
#Not use top 20 species overall because we are NOT assuming that
#they all belong to one fishery/ metier
groupingfunction <- function(x){
x %>%
split(.$fishing_gear)%>%
dplyr::group_by(fishname) %>%
dplyr::summarise(count=n()) %>%
dplyr::arrange(desc(count)) %>%
dplyr::top_n(5)
}
blo <- map(df2, groupingfunction)
blo <- map(as.list(df2), groupingfunction)
blo <- df2 %>%
group_split(fishing_gear) %>%
purrr::map(dplyr::group_by(fishname)) %>%
purrr::map(dplyr::summarise(count=n()), data=.) %>%
purrr::map(dplyr::arrange(desc(count)), data=.) %>%
purrr::map(top_n(5), data=.)
blo <- df2 %>%
group_split(fishing_gear) %>%
purrr::map(~group_by(fishname)) %>%
purrr::map(dplyr::summarise(count=n()), data=.) %>%
purrr::map(dplyr::arrange(desc(count)), data=.) %>%
purrr::map(top_n(5), data=.)
blo <- df2 %>%
group_split(fishing_gear) %>%
purrr::map(~group_by(.x,fishname)) %>%
purrr::map(dplyr::summarise(count=n()), data=.) %>%
purrr::map(dplyr::arrange(desc(count)), data=.) %>%
purrr::map(top_n(5), data=.)
blo <- df2 %>%
group_split(fishing_gear) %>%
purrr::map(group_by,fishname) %>%
purrr::map(dplyr::summarise(count=n()), data=.) %>%
purrr::map(dplyr::arrange(desc(count)), data=.) %>%
purrr::map(top_n(5), data=.)
blo <- df2 %>%
group_split(fishing_gear) %>%
purrr::map(~group_by,fishname) %>%
purrr::map(dplyr::summarise(count=n()), data=.) %>%
purrr::map(dplyr::arrange(desc(count)), data=.) %>%
purrr::map(top_n(5), data=.)
blo <- df2 %>%
split(.$fishing_gear) %>%
purrr::map(~group_by,fishname) %>%
purrr::map(dplyr::summarise(count=n()), data=.) %>%
purrr::map(dplyr::arrange(desc(count)), data=.) %>%
purrr::map(top_n(5), data=.)
df2 %>%
split(.$fishing_gear) %>%
purrr::map(~group_by,fishname)
df2 %>%
split(.$fishing_gear) %>%
purrr::map(group_by,fishname)
df2 %>%
split(.$fishing_gear) %>%
purrr::map(group_by,fishname) %>%
purrr::map(dplyr::summarise,count=n())
blo <- df2 %>%
split(.$fishing_gear) %>%
purrr::map(group_by,fishname) %>%
purrr::map(dplyr::summarise,count=n()) %>%
purrr::map(dplyr::arrange,desc(count)) %>%
purrr::map(top_n(), 5)
blo <- df2 %>%
split(.$fishing_gear) %>%
purrr::map(group_by,fishname) %>%
purrr::map(dplyr::summarise,count=n()) %>%
purrr::map(dplyr::arrange,desc(count)) %>%
purrr::map(top_n(5))
blo <- df2 %>%
split(.$fishing_gear) %>%
purrr::map(group_by,fishname) %>%
purrr::map(dplyr::summarise,count=n()) %>%
purrr::map(dplyr::arrange,desc(count)) %>%
purrr::map(dplyr::top_n(5))
blo <- df2 %>%
split(.$fishing_gear) %>%
purrr::map(group_by,fishname) %>%
purrr::map(dplyr::summarise,count=n()) %>%
purrr::map(dplyr::arrange,desc(count)) %>%
purrr::map(dplyr::top_n,5)
View(blo)
View(blo)
blo <- df2 %>%
split(.$fishing_gear) %>%
purrr::map(group_by,fishname) %>%
purrr::map(dplyr::summarise,count=n()) %>%
purrr::map(dplyr::arrange,desc(count)) %>%
purrr::map(dplyr::top_n,nSpecies)
unlist(blo)
blodf <- as.data.frame(unlist(blo))
View(blodf)
blodf <- do.call(rbond, blo)
blodf <- do.call(rbind, blo)
View(blodf)
?spread
blodf <- unlist(blo, recursive=FALSE)
blodf <- do.call(rbind, blodf)
View(blodf)
?unlist
blodf <- unlist(blo
blodf <- unlist(blo)
blodf <- unlist(blo)
blodf <- do.call(rbind, blodf)
blodf <- unlist(blo)
blodf <- rbindlist(blodf)
library(data.table)
blodf <- rbindlist(blodf)
blodf <- rbindlist(blo)
View(blodf)
View(blo)
blodf <- rbindlist(blo, use.names = TRUE)
View(blodf)
blodf <- rbindlist(blo, use.names = TRUE, idcol = TRUE)
View(blodf)
rs2 <-dbSendQuery(con, "SELECT f.oid, f.var_a, f.var_b, f.fish_genus, f.fish_species, f.lmat, f.lopt, f.linf, f.lmax, s.cm,
d.boat_id, d.landing_date, d.wpp1, d.wpp2, d.wpp3, d.first_codrs_picture_date,
d.expenses_fuel, d.expenses_bait, d.expenses_ice,
s.landing_id,
b.oid, b.registration_port,
b.gt_estimate, b.gt_declared, b.program_type, b.fishing_gear, b. boat_name
FROM ifish_fish f
INNER JOIN ifish_sizing s on f.oid= s.fish_id
INNER JOIN ifish_deepslope d on s.landing_id = d.oid
INNER JOIN ifish_boat b on d.boat_id= b.oid
WHERE s.fish_id > 0 and s.data_quality = 1
ORDER BY s.landing_id")
rs2 <-dbSendQuery(con, "SELECT f.oid, f.var_a, f.var_b, f.fish_genus, f.fish_species, f.lmat, f.lopt, f.linf, f.lmax, s.cm,
d.boat_id, d.landing_date, d.wpp1, d.wpp2, d.wpp3, d.first_codrs_picture_date,
d.expenses_fuel, d.expenses_bait, d.expenses_ice,
s.landing_id,
b.oid, b.registration_port,
b.gt_estimate, b.gt_declared, b.program_type, b.fishing_gear, b. boat_name
FROM ifish_fish f
INNER JOIN ifish_sizing s on f.oid= s.fish_id
INNER JOIN ifish_deepslope d on s.landing_id = d.oid
INNER JOIN ifish_boat b on d.boat_id= b.oid
WHERE s.fish_id > 0 and s.data_quality = 1
ORDER BY s.landing_id")
